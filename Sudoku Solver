#include <iostream>
#include <vector>

using namespace std;

const int SIZE = 9;  // Size of the Sudoku board

// Function to print the Sudoku board
void printBoard(const vector<vector<int>>& board) {
    for (int i = 0; i < SIZE; ++i) {
        for (int j = 0; j < SIZE; ++j) {
            cout << board[i][j] << " ";
        }
        cout << endl;
    }
}

// Check if it's safe to place a number in the given position
bool isSafe(const vector<vector<int>>& board, int row, int col, int num) {
    // Check if the number is not repeated in the row
    for (int x = 0; x < SIZE; ++x) {
        if (board[row][x] == num) return false;
    }
    
    // Check if the number is not repeated in the column
    for (int x = 0; x < SIZE; ++x) {
        if (board[x][col] == num) return false;
    }
    
    // Check if the number is not repeated in the 3x3 sub-grid
    int startRow = row - row % 3;
    int startCol = col - col % 3;
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            if (board[i + startRow][j + startCol] == num) return false;
        }
    }
    
    return true;
}

// Solve the Sudoku board using backtracking
bool solveSudoku(vector<vector<int>>& board) {
    int row, col;
    bool isEmpty = false;

    // Find an empty cell
    for (row = 0; row < SIZE; ++row) {
        for (col = 0; col < SIZE; ++col) {
            if (board[row][col] == 0) {
                isEmpty = true;
                break;
            }
        }
        if (isEmpty) break;
    }

    // If no empty cell is found, the board is solved
    if (!isEmpty) return true;

    // Try digits from 1 to 9
    for (int num = 1; num <= SIZE; ++num) {
        if (isSafe(board, row, col, num)) {
            board[row][col] = num;
            
            // Recursively attempt to solve the rest of the board
            if (solveSudoku(board)) return true;

            // If it fails, reset the cell and try the next number
            board[row][col] = 0;
        }
    }

    return false;  // Trigger backtracking
}

int main() {
    // Example Sudoku puzzle (0s represent empty cells)
    vector<vector<int>> board = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    cout << "Original Sudoku Board:" << endl;
    printBoard(board);

    if (solveSudoku(board)) {
        cout << "Solved Sudoku Board:" << endl;
        printBoard(board);
    } else {
        cout << "No solution exists." << endl;
    }

    return 0;
}
